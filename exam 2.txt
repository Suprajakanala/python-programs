#2Q .2
def is_valid_pin(pincode):
    if len(str(pincode)) == 6:
      return "True" 
    else:
      return "False"

#2Q .3
def is_member2(li1,li2):
    for i in li1:
        for j in li2:
            if i==j:
                b= "True"
            if i!=j:
                b= "False"
    return b


#2Q .4
def map_to_lengths_for(words):
    lengths = []
    for word in words:
        lengths.append(len(word))
    return lengths

def map_to_lengths_map(words):
    return map(len, words)

def map_to_lengths_lists(words):
    return [len(word) for word in words]
#2Q .5    
def longestLength(words):
    finalList = []
    for word in words:
        finalList.append((len(word), word))
    finalList.sort()
    print("The Longest word in the given list is:", finalList[-1][1], " , and it's length is ", len(finalList[-1][1]))
a = ["i", "am", "writing", "assignment"]
b = ["she", "is", "singing"]    

#2Q .6
def palindrome_version(str):
    punc='''!()[]-;:'"\,<>./?@#%^&*_+~ '''
    s=""
    for i in str:
        if i in punc:
            s=s+""
        else:
            s=s+i
    return s.lower()==s[::-1].lower()

#2Q .7
def frequency(str):
  freq = {}
  for i in str:
    if i in freq:
      freq[i] += 1
    else:
      freq[i] = 1
  return freq

#2Q .8
def encoder_decoder(str):
    key = {'a':'n', 'b':'o', 'c':'p', 'd':'q', 'e':'r', 'f':'s', 'g':'t', 'h':'u', 'i':'v', 'j':'w', 'k':'x', 'l':'y', 'm':'z', 'n':'a', 'o':'b', 'p':'c', 'q':'d', 'r':'e', 's':'f', 't':'g', 'u':'h', 'v':'i', 'w':'j', 'x':'k', 'y':'l', 'z':'m', 'A':'N', 'H':'U', 'T':'V', 'J': 'W', 'K':'X', 'L':'Y', 'M':'Z', 'N': 'A', 'O':'B', 'P':'C', 'Q':'D', 'R':'E', 'S':'F', 'T':'G', 'U':'H', 'V':'T', 'W':'J', 'X':'K', 'Y':'L', 'B':'0', 'C':'P', 'D': 'Q', 'E':'R', 'F':'S', 'G':'T','Z':'M'}
    s=""
    for i in str:
        if i in key.keys():
            s=s+key[i]
        else:
            s=s+i
    return s

#2Q .9

def freq(str):
    str_list = str.split()   # split:used to break the words.
    unique_words = set(str_list)
    for words in unique_words :
        print('Frequency of ', words , 'is :', str_list.count(words))
        
# 3Q .1

def search(patt, txt):
    M = len(patt)
    N = len(txt)
    for i in range(N - M + 1):
        j = 0
        while(j < M):
            if (txt[i + j] != patt[j]):
                break
            j += 1
        if (j == M):
            print("Pattern found at index ", i)



if __name__ == "__main__":

    print("2 Q.2: Write a function def is_valid_pin(pin_code) which should return whether or not a string represents a valid Indian pin  code. Consider a valid pin code is any string consisting of exactly 6 digits.")
    print(is_valid_pin("1234"))
    
    print("         ")
    
    print("2 Q.3: Define a function overlapping() that takes two lists and returns True if they have at least one member in common, False otherwise.")
    print(is_member2([1,2,3,4],[4,5,6,7]))
    print(is_member2([1,2,3],[1,2,3]))
    
    print("         ")

    print("2 Q.4 : find length of words in a given list.")
    words = ['i', 'am', 'learning', 'python']
    print("Length of words in a given list is : ", map_to_lengths_for(words))
    
    print("        ")
      
    print("2 Q.5 : Write a program to find Longest word in a given list.")
    longestLength(a)
    longestLength(b)
    
    print("         ")
    
    print("2 Q.6: Write a version of a palindrome recognizer that also accepts phrase palindromes.")
    print(palindrome_version("was it a rat i saw?"))
    
    print("       ")
    
    print("2 Q7: Write a function char_freq() that takes a string and builds a frequency listing of the characters contained in it. Represent the frequency listing as a Python dictionary.")
    print(frequency("hi"))
    print(frequency("hello"))
    
    print("       ")
   
    print("2 Q8: In Cryptography , a caesar cipher is a very simple techniques in which each letter in the plain text is replaced by a letter some fixed number of positions down the alphabet. Your task in this exercise is to implement an encoder/decoder of ROT-13. Once you're done, you will be able to read the following secret message:Pnrfne pvcure? V zhpu cersre Pnrfne fnynq!")
    print(encoder_decoder("V zhpu cersre Pnrfne fnynq!"))
    
    print("       ")
    
    print("2 Q.9 : Write a program to find frequency of each word in a given string : ")
    freq('apple mango apple orange orange apple guava mango mango')
    freq('she is running and jumping ')

    print("         ")
     
    print("3 Q.1 : Write a program to find occurance of a search pattern inside a given text.")
    txt = "ABCDEFGHIJKLABCD"
    patt = "ABCD"
    search(patt, txt)