
#2Q .1

def is_member(a,list):
    for i in range(len(list)):
        if a == list[i]:
            return "True"
    return "False"


#2Q .2

def is_valid_pin(pincode):
    if ((len(str(pincode)) == 6) and (pincode.isdigit())):
       return "True"
    else:
        return "False"


#2Q .3

def is_member2(li1,li2):
    for i in li1:
        for j in li2:
            if i==j:
                b= "True"
            if i!=j:
                b= "False"
    return b


#2Q .4

def map_to_lengths_for(words):
    lengths = []
    for word in words:
        lengths.append(len(word))
    return lengths

def map_to_lengths_map(words):
    return map(len, words)

def map_to_lengths_lists(words):
    return [len(word) for word in words]


#2Q .5 
   
def find_longest_word(words):
    finalList = []
    for word in words:
        finalList.append((len(word), word))
    finalList.sort()
    print(finalList[-1][1], " , and it's length is ", len(finalList[-1][1]))
a = ["i", "am", "writing", "assignment"]
b = ["she", "is", "singing"]    


#2Q .6

def palindrome_version(str):
    punc='''!()[]-;:'"\,<>./?@#%^&*_+~ '''
    s=""
    for i in str:
        if i in punc:
            s=s+""
        else:
            s=s+i
    return s.lower()==s[::-1].lower()


#2Q .7

def char_frequency(str):
  freq = {}
  for i in str:
    if i in freq:
      freq[i] += 1
    else:
      freq[i] = 1
  return freq


#2Q .8

def encoder_decoder(str):
    key = {'a':'n', 'b':'o', 'c':'p', 'd':'q', 'e':'r', 'f':'s', 'g':'t', 'h':'u', 'i':'v', 'j':'w', 'k':'x', 'l':'y', 'm':'z', 'n':'a', 'o':'b', 'p':'c', 'q':'d', 'r':'e', 's':'f', 't':'g', 'u':'h', 'v':'i', 'w':'j', 'x':'k', 'y':'l', 'z':'m', 'A':'N', 'H':'U', 'T':'V', 'J': 'W', 'K':'X', 'L':'Y', 'M':'Z', 'N': 'A', 'O':'B', 'P':'C', 'Q':'D', 'R':'E', 'S':'F', 'T':'G', 'U':'H', 'V':'T', 'W':'J', 'X':'K', 'Y':'L', 'B':'0', 'C':'P', 'D': 'Q', 'E':'R', 'F':'S', 'G':'T','Z':'M'}
    s=""
    for i in str:
        if i in key.keys():
            s=s+key[i]
        else:
            s=s+i
    return s


#2Q .9

def freq(str):
    str_list = str.split()   # split:used to break the words.
    unique_words = set(str_list)
    for words in unique_words :
        print('Frequency of ', words , 'is :', str_list.count(words))
 
       
#2Q .10

def my_word_search(my_doc_list, my_keyword):
    if my_keyword in my_doc_list:
        return "True"
    else:
        return "False"
my_doc_list = ["The Learn Golang Challenge School", "They bought a scooter", "Schools"]




if __name__ == "__main__":

    print("2Q .1: Write a function is_member () that takes a value x and a list of a, and returns True if x is a member of a, False otherwise.")
    print("if x is a member of given list : ",is_member(2,[1,2,3,4,5]))
    print("if x is a member of given list : ",is_member(5,[1,2,3,4]))

    print("         ")

    print("2 Q.2: Write a function def is_valid_pin(pin_code) which should return whether or not a string represents a valid Indian pin  code. Consider a valid pin code is any string consisting of exactly 6 digits.")
    print("Given code 123456 is valid indian pin code : ", is_valid_pin("123456"))
    print("Given code 1234 is valid indian pin code : ", is_valid_pin("1234"))
    print("Given code 123ab is valid indian pin code : ", is_valid_pin("123ab"))
    print("Given code 12@*%$#&^ is valid indian pin code : ", is_valid_pin("12@*%$#&^"))

    print("         ")
    
    print("2 Q.3: Define a function overlapping() that takes two lists and returns True if they have at least one member in common, False otherwise.")
    print("Given 2 lists have common numbers : ", is_member2([1,2,3,4],[4,5,6,7]))
    print("Given 2 lists have common numbers : ", is_member2([1,2,3],[1,2,3]))
    
    print("         ")

    print("2 Q.4 : find length of words in a given list.")
    words = ['i', 'am', 'learning', 'python']
    print("Length of words in a given list is ['i', 'am', 'learning', 'python'] : ", map_to_lengths_for(words))
    
    print("        ")
      
    print("2 Q.5 : Write a program to find Longest word in a given list.")
    print("The Longest word in the given list a is : ")
    find_longest_word(a)
    print("The Longest word in the given list b is : ")
    find_longest_word(b)
    
    print("         ")
    
    print("2 Q.6: Write a version of a palindrome recognizer that also accepts phrase palindromes.")
    print(palindrome_version("was it a rat i saw?"))
    
    print("       ")
    
    print("2 Q7: Write a function char_freq() that takes a string and builds a frequency listing of the characters contained in it. Represent the frequency listing as a Python dictionary.")
    print(char_frequency("abbabcbdbabdbdbabababcbcba"))
    print(char_frequency("hello"))
    print(char_frequency("hi"))

    print("       ")
   
    print("2 Q8: In Cryptography , a caesar cipher is a very simple techniques in which each letter in the plain text is replaced by a letter some fixed number of positions down the alphabet. Your task in this exercise is to implement an encoder/decoder of ROT-13. Once you're done, you will be able to read the following secret message:Pnrfne pvcure? V zhpu cersre Pnrfne fnynq!")
    print("After decoded the message is : ", encoder_decoder("V zhpu cersre Pnrfne fnynq!"))
    print("After decoded the message is : ", encoder_decoder("abcdefghijklmnopqrstuvwxyz."))
    
    print("       ")
    
    print("2 Q.9 : Write a program to find frequency of each word in a given string : ")
    freq('apple mango apple orange orange apple guava mango mango')
    freq('she is running and jumping ')

    print("          ")
    
    print(" school is present in a given list : ", my_word_search(my_doc_list, "school"))
    print("closed is present in a given list : ", my_word_search(my_doc_list, "and"))


